{"version":3,"sources":["GuestName.js","Guest.js","PendingGuest.js","GuestList.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["GuestName","props","isEditing","type","value","children","onChange","handleNameEdits","Guest","e","setName","target","name","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","pendingGuest","guests","filter","guest","isFiltered","map","index","key","toggleConfirmationAt","toggleEditingAt","text","setNameAt","removeGuestAt","Counter","numberAttending","numberUnconfirmed","totalInvited","App","state","toggleGuestPropertyAt","property","indexToChange","setState","slice","toggleFilter","handleNameInput","newGuestSubmitHandler","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1d5d897.chunk.js","sourcesContent":["import React from 'react';\t\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GuestName = props => {\r\n    if (props.isEditing) {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                value={props.children}\r\n                onChange={props.handleNameEdits} />  \r\n        );\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {props.children}\r\n        </span>  \r\n    );\r\n};\r\n\r\nGuestName.propTypes = {\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleNameEdits: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default GuestName;","import React from 'react';\t\r\nimport PropTypes from 'prop-types';\r\nimport GuestName from './GuestName';\r\n\r\nconst Guest = props =>\r\n         <li>\r\n        <GuestName\r\n            isEditing={props.isEditing}\r\n            handleNameEdits={e => props.setName(e.target.value)} >\r\n            {props.name}\r\n        </GuestName>\r\n            <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.isConfirmed}\r\n                onChange={props.handleConfirmation}\r\n            /> Confirmed\r\n            </label>\r\n        <button onClick={props.handleToggleEditing}>{props.isEditing ? \"save\" : \"edit\"}</button>\r\n        <button onClick={props.handleRemove}>remove</button>\r\n        </li>;\r\n\r\nGuest.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    isConfirmed: PropTypes.bool.isRequired,\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleConfirmation: PropTypes.func.isRequired,\r\n    handleToggleEditing: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    handleRemove: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default Guest;","import React from 'react';\t\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst PendingGuest = props => {\r\n    if (props.name) {\r\n        return (\r\n            <li className=\"pending\">\r\n                <span>\r\n                    {props.name}\r\n                </span>\r\n            </li>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nPendingGuest.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default PendingGuest;","import React from 'react';\t\r\nimport PropTypes from 'prop-types';\r\nimport Guest from './Guest';\r\nimport PendingGuest from './PendingGuest';\r\n\r\nconst GuestList = props =>\r\n    <ul>\r\n        <PendingGuest name={props.pendingGuest} />\r\n        {props.guests\r\n            .filter(guest => !props.isFiltered || guest.isConfirmed)\r\n            .map((guest, index) =>\r\n                <Guest\r\n                    key={index}\r\n                    name={guest.name}\r\n                    isConfirmed={guest.isConfirmed}\r\n                    isEditing={guest.isEditing}\r\n                    handleConfirmation={() => props.toggleConfirmationAt(index)}\r\n                    handleToggleEditing={() => props.toggleEditingAt(index)}\r\n                    setName={text => props.setNameAt(text, index)}\r\n                    handleRemove={() => props.removeGuestAt(index)}/>\r\n        )}\r\n    </ul>;\r\n\r\nGuestList.propTypes = {\r\n    guests: PropTypes.array.isRequired,\r\n    toggleConfirmationAt: PropTypes.func.isRequired,\r\n    toggleEditingAt: PropTypes.func.isRequired,\r\n    setNameAt: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n    removeGuestAt: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default GuestList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Counter = props => \r\n    <table className=\"counter\">\r\n        <tbody>\r\n            <tr>\r\n                <td>Attending:</td>\r\n                <td>{props.numberAttending}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Unconfirmed:</td>\r\n                <td>{props.numberUnconfirmed}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Total:</td>\r\n                <td>{props.totalInvited}</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>;\r\n\r\nCounter.propTypes = {\r\n    numberAttending: PropTypes.number,\r\n    numberUnconfirmed: PropTypes.number,\r\n    totalInvited: PropTypes.number\r\n};\r\n\r\nexport default Counter;","import React, { Component } from 'react';\nimport './App.css';\nimport GuestList from './GuestList';\nimport Counter from './Counter';\n\nclass App extends Component {\n\n    state = {\n        isFiltered: false,\n        pendingGuest: \"\",\n        guests: [\r\n            {\r\n                name: 'Ben',\r\n                isConfirmed: false,\r\n                isEditing: false\r\n            },\r\n            {\r\n                name: 'Ryan',\r\n                isConfirmed: true,\r\n                isEditing: false\r\n            },\r\n            {\r\n                name: 'Daniel',\r\n                isConfirmed: false,\r\n                isEditing: true\r\n            }\r\n        ]\r\n    };\n\n    toggleGuestPropertyAt = (property, indexToChange) =>\n        this.setState({\n            guests: this.state.guests.map((guest, index) => {\n                if (index === indexToChange) {\n                    return {\r\n                        ...guest,\r\n                        [property]: !guest[property]\r\n                    };\r\n                }\n                return guest;\n            })\n        });\n\n    toggleConfirmationAt = index =>\n        this.toggleGuestPropertyAt(\"isConfirmed\", index);\n\n    removeGuestAt = index =>\n        this.setState({\n            guests: [\r\n                ...this.state.guests.slice(0, index),\r\n                ...this.state.guests.slice(index + 1)\r\n            ]\r\n        });\n\n    toggleEditingAt = index =>\n        this.toggleGuestPropertyAt(\"isEditing\", index);\n\n    setNameAt = (name, indexToChange) =>\n        this.setState({\n            guests: this.state.guests.map((guest, index) => {\n                if (index === indexToChange) {\n                    return {\r\n                        ...guest,\r\n                        name\r\n                    };\r\n                }\n                return guest;\n            })\n        });\n\n    toggleFilter = () =>\n        this.setState({ isFiltered: !this.state.isFiltered }); \n\n    handleNameInput = e =>\n        this.setState({ pendingGuest: e.target.value });\n\n    newGuestSubmitHandler = e => {\n        e.preventDefault();\r\n        this.setState({\r\n            guests: [\r\n                {\r\n                    name: this.state.pendingGuest,\r\n                    isConfirmed: false,\r\n                    isEditing: false\r\n                },\r\n                ...this.state.guests\r\n            ],\r\n            pendingGuest: ''\r\n        });\r\n    }\n\n    getTotalInvited = () => this.state.guests.length;\n\n    getAttendingGuests = () =>\n        this.state.guests.reduce(\n            (total, guest) => guest.isConfirmed ? total + 1 : total,\n            0\n        );\n\n    render() {\n        const totalInvited = this.getTotalInvited();\n        const numberAttending = this.getAttendingGuests();\n        const numberUnconfirmed = totalInvited - numberAttending;\n\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1>RSVP</h1>\n                    <p>An Invitation App</p>\n                    <form onSubmit={this.newGuestSubmitHandler}>\n                        <input\n                            type=\"text\"\n                            onChange={this.handleNameInput}\n                            value={this.state.pendingGuest}\n                            placeholder=\"Invite Someone\"\n                        />\n                        <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n                    </form>\n                </header>\n                <div className=\"main\">\n                    <div>\n                        <h2>Invitees</h2>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={this.toggleFilter}\n                                checked={this.state.isFiltered}\n                            /> Hide those who haven't responded\n                        </label>\n                    </div>\n\n                    <Counter\n                        totalInvited={totalInvited}\n                        numberAttending={numberAttending}\n                        numberUnconfirmed={numberUnconfirmed} />\n\n                    <GuestList\n                        guests={this.state.guests}\n                        toggleConfirmationAt={this.toggleConfirmationAt}\n                        toggleEditingAt={this.toggleEditingAt}\n                        setNameAt={this.setNameAt}\n                        isFiltered={this.state.isFiltered}\n                        removeGuestAt={this.removeGuestAt}\n                        pendingGuest={this.state.pendingGuest}\n                    />\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}